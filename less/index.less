// .size {
//     width: 100px;
//     height: 100px;
//     border:1px solid green;
// }

// #box{
//     .size();
//     background-color: #58a;
// }

// .wrap {
//     .size; //没有参数的情况下不加括号也可以
//     background-color: skyblue;
// }

//Mixin传参
// .init(@width,@height,@color) {
//     width:@width;
//     height: @height;
//     color:@color;
// }
// @width:200px;
// @height:200px;
// @color:red;
// .box1{
//     .init(@width, @height, @color);
//     background-color: skyblue;
// }
// .wrap {
//     .init(300px,100px,red);
//     border:1px solid blue;
// }

// .wrapProp(@width,@height,@color){
//     width:@width;
//     height:@height;
//     border:1px solid @color;
// }

// @width:200px;
// @height:200px;
// @color:red;

// #box{
//     background: skyblue;
//     .wrapProp(300px,100px,blue);
//     // width:100px;
// }

// .wrap{
//     .wrapProp(@width,@height,@color);
// }

//Mixin继承
// .wrap{
//     width:200px;
//     height:200px;
// }
// .box{
//     .wrap; // 这里将会继承.wrap的样式
//     color:red;
// }

//Mixin里除了可以写样式,选择器, 还可以写变量
// .mixin() {
//   @width:  100%;
//   @height: 200px;
// }

// .box1 {
//   .mixin();
//   width:  @width;
//   height: @height;
//   border:1px solid red;
// }

// Mixins 里除了返回变量,还可以返回Mixins
// #box(@color){
//     .wrap(){
//         width:500px;
//         height:100px;
//         background:@color;
//     }
// }

// .box1{
//     #box(red);  // 执行第一个Mixin是为了能够使用里面的Mixin
//     .wrap();   // 第二个执行Mixin里面的Mixin
// }

// //在Minxin中使用选择器
// .hover(@color){
//     &:hover{
//         background:@color;
//     }
// }
// .wrap{
//     width: 100px;
//     height: 100px;
//     background: red;
//     &:hover > span{  //注意在此处的&与冒号之间不能有空格,等价于.wrap:hover >span
//         background:skyblue;
//     }
//     // .hover(skyblue)    //如果只是当前元素添加hover效果,而不是给当前元素的子元素或兄弟元素添加,那么&可省略
    
// }

// .box1{
//     width: 200px;
//     height: 200px;
//     margin-top:20px;
//     background: skyblue;

//     &:hover{
//         background:red;
//     }
//     // .hover(red);
// }

//MInxin传参
// .size(@width : 100px, @height : 100px , @color : pink){
//     width: @width;
//     height: @height;
//     background-color: @color;
// }
// .box1 {
//     .size(50px,50px,#58a);
//     border:3px solid pink;
// }
// .wrap {
//     .size;
//     color:#fff;
// }

// ... 就是@reset 剩余参数, 会将剩余的所有参数都加到@arguments里 
.boxShadow(...){
    box-shadow: @arguments;
}

.box1{
.boxShadow(1px,4px,30px,red);
}

// @arguments是处理第一个实参外的所有实参的集合
.boxShadow(@width,...){
    box-shadow: @arguments;
}
.wrap{
.boxShadow( 50px,1px,4px,30px,red);
}